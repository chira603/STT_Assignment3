import json
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import argparse

print(matplotlib.__version__)
def compute_fan_in_out(json_file):
    with open(json_file, "r") as f:
        data = json.load(f)
    
    fan_in = {}
    fan_out = {}
    for module, details in data.items():
        fan_out[module] = len(details.get("imports", []))
        fan_in[module] = len(details.get("imported_by", []))
    return fan_in, fan_out

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Compute fan-in and fan-out for each module")
    parser.add_argument("--json_file", type=str, required=True,
                        help="Path to the JSON file generated by pydeps --show-deps")
    args = parser.parse_args()
    
    json_file = args.json_file
    if not json_file:
        raise ValueError("The --json_file argument is required and cannot be None.")
    
    fan_in, fan_out = compute_fan_in_out(json_file)
    
    modules = list(fan_in.keys())
    fan_in_values = [fan_in[m] for m in modules]
    fan_out_values = [fan_out[m] for m in modules]
    
    x = np.arange(len(modules))
    width = 0.35
    
    fig, ax = plt.subplots(figsize=(14, 8))
    bars_in = ax.bar(x - width/2, fan_in_values, width, label="Fan-In")
    bars_out = ax.bar(x + width/2, fan_out_values, width, label="Fan-Out")
    
    ax.set_ylabel("Count")
    ax.set_title("Fan-In and Fan-Out for Each Module")
    ax.set_xticks(x)
    ax.set_xticklabels(modules, rotation=90)
    ax.legend()
    
    def autolabel(bars):
        for bar in bars:
            height = bar.get_height()
            ax.annotate(f'{height}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom')
    
    autolabel(bars_in)
    autolabel(bars_out)
    
    fig.tight_layout()
    plt.savefig("fan_in_out.png")